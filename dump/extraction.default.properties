# download and extraction target dir
base-dir=/data/dbpedia-release/data

# Source file. If source file name ends with .gz or .bz2, it is unzipped on the fly. 
# Must exist in the directory xxwiki/yyyymmdd and have the prefix xxwiki-yyyymmdd-
# where xx is the wiki code and yyyymmdd is the dump date.
 
# default:
# source=pages-articles.xml.bz2

# alternatives:
# source=pages-articles.xml.gz
# source=pages-articles.xml

###### Extract from part files ######
#
# Please make sure that the regex actually matches the format used by ALL the wikis you are going to extract from!!!!
# One that should work in all cases is
# source=@pages-articles\\d*\\.xml(-p\\d+p\\d+)?\\.bz2
#
# NOTE: when using the above regex you should make sure you do not have part files AND regular dump files together
# for the same wiki, e.g. frwiki-20131120-pages-articles1.xml.bz2 and frwiki-20131120-pages-articles.xml.bz2, as they
# BOTH will match and that will result in duplicate output data
#
# Example:
# enwiki => enwiki-latest-pages-articles1.xml-p000000010p000010000.bz2 hence @pages-articles\\d+\\.xml-p\\d+p\\d+\\.bz2 matches
# frwiki => frwiki-latest-pages-articles1.xml.bz2 hence @pages-articles\\d+\\.xml\\.bz2 matches (the previous regex does not!)
# commonswiki => it does not have part files! This is true for other wikis as well.
#
# source=@pages-articles\\d+\\.xml-p\\d+p\\d+\\.bz2

# In case of multistream chunks
# source=@pages-articles-multistream\\.xml\\.\\d+\\.bz2

# use only directories that contain a 'download-complete' file? Default is false.
require-download-complete=true

# List of languages or article count ranges, e.g. 'en,de,fr' or '10000-20000' or '10000-', or '@mappings'
languages=10000-

# extractor class names starting with "." are prefixed by "org.dbpedia.extraction.mappings"

extractors=.ArticleCategoriesExtractor,.ArticleTemplatesExtractor,.CategoryLabelExtractor,\
.ExternalLinksExtractor,.GeoExtractor,.InfoboxExtractor,.InterLanguageLinksExtractor,.LabelExtractor,.PageIdExtractor,\
.PageLinksExtractor,.RedirectExtractor,.RevisionIdExtractor,.ProvenanceExtractor,.SkosCategoriesExtractor,\
.ArticlePageExtractor,.WikiPageOutDegreeExtractor,.WikiPageLengthExtractor

extractors.ar=.MappingExtractor,.TopicalConceptsExtractor

extractors.be=.MappingExtractor

extractors.bg=.MappingExtractor

extractors.bn=.MappingExtractor

extractors.ca=.MappingExtractor,.DisambiguationExtractor,.HomepageExtractor,\
.TopicalConceptsExtractor

extractors.commons=.MappingExtractor,.ContributorExtractor,.TemplateParameterExtractor,.FileTypeExtractor,.GalleryExtractor

extractors.cs=.MappingExtractor

extractors.cy=.MappingExtractor

extractors.de=.MappingExtractor,.DisambiguationExtractor,.HomepageExtractor,.ImageExtractor,\
.PersondataExtractor,.PndExtractor

extractors.el=.MappingExtractor,.DisambiguationExtractor,.HomepageExtractor,.ImageExtractor,\
.TopicalConceptsExtractor

extractors.en=.MappingExtractor,.DisambiguationExtractor,.HomepageExtractor,.ImageExtractor,\
.PersondataExtractor,.PndExtractor,.TopicalConceptsExtractor,.FlickrWrapprLinkExtractor

extractors.eo=.MappingExtractor

extractors.es=.MappingExtractor,.DisambiguationExtractor,.HomepageExtractor,.ImageExtractor,\
.TopicalConceptsExtractor

extractors.et=.MappingExtractor

extractors.eu=.MappingExtractor,.DisambiguationExtractor,.HomepageExtractor,.ImageExtractor,\
.TopicalConceptsExtractor

extractors.fr=.MappingExtractor,.DisambiguationExtractor,.HomepageExtractor,.ImageExtractor,\
.PndExtractor,.TopicalConceptsExtractor,.fr.PopulationExtractor

extractors.ga=.MappingExtractor,.HomepageExtractor

extractors.hi=.MappingExtractor

extractors.hr=.MappingExtractor

extractors.hu=.MappingExtractor

extractors.id=.MappingExtractor

extractors.it=.MappingExtractor,.DisambiguationExtractor,.HomepageExtractor,.ImageExtractor,\
.TopicalConceptsExtractor

extractors.ja=.MappingExtractor

extractors.ko=.MappingExtractor,.DisambiguationExtractor

extractors.nl=.MappingExtractor,.DisambiguationExtractor

extractors.pl=.MappingExtractor,.DisambiguationExtractor,.HomepageExtractor,.ImageExtractor

extractors.pt=.MappingExtractor,.DisambiguationExtractor,.HomepageExtractor,.ImageExtractor,\
.TopicalConceptsExtractor

extractors.ru=.MappingExtractor,.DisambiguationExtractor,.HomepageExtractor,.ImageExtractor,\
.TopicalConceptsExtractor

extractors.sk=.MappingExtractor

extractors.sl=.MappingExtractor

extractors.sr=.MappingExtractor

extractors.tr=.MappingExtractor

extractors.ur=.MappingExtractor

extractors.zh=.MappingExtractor

# if ontology and mapping files are not given or do not exist, download info from mappings.dbpedia.org
ontology=../ontology.xml
mappings=../mappings

# Serialization URI policies and file formats. Quick guide:
# uri-policy keys: uri, generic, xml-safe, reject-long
# uri-policy position modifiers: -subjects, -predicates, -objects, -datatypes, -contexts
# uri-policy values: comma-separated languages or '*' for all languages
# format values: n-triples, n-quads, turtle-triples, turtle-quads, trix-triples, trix-quads
# See http://git.io/DBpedia-serialization-format-properties for details.

# For backwards compatibility, en uses generic URIs. All others use local IRIs.
uri-policy.uri=uri:en; generic:en; xml-safe-predicates:*; reject-long:*
uri-policy.iri=generic:en; xml-safe-predicates:*; reject-long:*

# NT is unreadable anyway - might as well use URIs for en
format.nt.gz=n-triples;uri-policy.uri
format.nq.gz=n-quads;uri-policy.uri

# Turtle is much more readable - use nice IRIs for all languages
format.ttl.gz=turtle-triples;uri-policy.iri
format.tql.gz=turtle-quads;uri-policy.iri
